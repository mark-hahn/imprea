// Generated by CoffeeScript 2.6.1
(function() {
  var Imprea, _, globalObservableValues, globalObservers,
    splice = [].splice;

  _ = require('lodash');

  globalObservers = {};

  globalObservableValues = {};

  Imprea = class Imprea {
    output(...names) {
      var i, len, name, results;
      results = [];
      for (i = 0, len = names.length; i < len; i++) {
        name = names[i];
        results.push(((name) => {
          if (globalObservableValues[name] == null) {
            globalObservableValues[name] = null;
          }
          return this[name] = (value) => {
            var j, len1, observer, ref, ref1, results1;
            if (!_.eq(globalObservableValues[name], value)) {
              globalObservableValues[name] = (typeof value === 'object' ? _.cloneDeep(value) : value);
              ref1 = (ref = globalObservers[name]) != null ? ref : [];
              results1 = [];
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                observer = ref1[j];
                observer.imprea[name] = value;
                results1.push(observer.func.call(observer.reactCallSelf, name, value));
              }
              return results1;
            }
          };
        })(name));
      }
      return results;
    }

    react(...names) {
      var func, i, len, name, reactCallSelf, ref, results;
      ref = names, [...names] = ref, [func] = splice.call(names, -1);
      reactCallSelf = this;
      if (names[0] === '*') {
        names = _.keys(globalObservableValues);
        reactCallSelf = globalObservableValues;
      }
      results = [];
      for (i = 0, len = names.length; i < len; i++) {
        name = names[i];
        if (!(typeof this[name] !== 'function')) {
          continue;
        }
        if (this[name] == null) {
          this[name] = null;
        }
        if (globalObservers[name] == null) {
          globalObservers[name] = [];
        }
        results.push(globalObservers[name].push({
          imprea: this,
          reactCallSelf,
          func
        }));
      }
      return results;
    }

  };

  module.exports = function() {
    return new Imprea();
  };

}).call(this);
